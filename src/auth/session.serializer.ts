import { Injectable } from '@nestjs/common';
import { PassportSerializer } from '@nestjs/passport';
import { UsersService } from '../users/users.service';

@Injectable()
export class SessionSerializer extends PassportSerializer {
  constructor(private readonly usersService: UsersService) {
    super();
  }

  serializeUser(user: any, done: (err: Error | null, user?: any) => void) {
    console.log('‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
    done(null, user.userId); // –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ userId
  }

  async deserializeUser(userId: number, done: (err: Error | null, user?: any) => void) {
    console.log('üîÑ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId:', userId);

    const user = await this.usersService.findOne({ where: { id: userId } });

    if (!user) {
      console.error('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!', userId);
      return done(null, false);
    }

    console.log('‚úÖ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    done(null, user);
  }
}


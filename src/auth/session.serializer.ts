import { Injectable } from '@nestjs/common';
import { PassportSerializer } from '@nestjs/passport';
import { UsersService } from '../users/users.service';

@Injectable()
export class SessionSerializer extends PassportSerializer {
  constructor(private readonly usersService: UsersService) {
    super();
  }

  serializeUser(user: any, done: (err: Error | null, user?: any) => void) {
    console.log('‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
    if (!user || !user.userId) {
      console.error('‚ùå –û—à–∏–±–∫–∞: userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!', user);
    }
    done(null, user.userId); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ userId –≤ —Å–µ—Å—Å–∏—é
  }

  async deserializeUser(userId: number, done: (err: Error | null, user?: any) => void) {
    console.log('üîÑ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId:', userId);
    
    try {
      const user = await this.usersService.findById(userId);
      if (!user) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏!', userId);
        return done(null, null);
      }
      console.log('‚úÖ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
      done(null, user);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      done(error);
    }
  }
}
